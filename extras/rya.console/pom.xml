<?xml version='1.0'?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.apache.rya</groupId>
        <artifactId>rya.extras</artifactId>
        <version>3.2.10-SNAPSHOT</version>
    </parent>

    <artifactId>rya.console</artifactId>
    <name>Apache Rya Console</name>

    <properties>
        <jar.mainclass>org.springframework.shell.Bootstrap</jar.mainclass>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.apache.rya</groupId>
            <artifactId>rya.api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.rya</groupId>
            <artifactId>accumulo.rya</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>jline</groupId>
                    <artifactId>jline</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- TODO remove if dropping old shell. -->
        <dependency>
            <groupId>org.springframework.shell</groupId>
            <artifactId>spring-shell</artifactId>
        </dependency>
        
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Use JAXB to generate the Java source code used to unmarshal the shell's
                 configuration file. You will have to add target/generated-sources/jaxb to
                 your eclipse build path if you want Eclipse to recognize the generated source. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jaxb2-maven-plugin</artifactId>
                <version>2.2</version>
                <executions>
                    <execution>
                        <id>xjc</id>
                        <goals>
                            <goal>xjc</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- Specify the configuration XSD file. -->
                    <sources>   
                         <source>src/main/resources/config.xsd</source>
                    </sources>
                    
                    <!-- The package the generated source is writen to. -->
                    <packageName>mvm.rya.shell.config.generated</packageName>
                </configuration>
            </plugin>
        
            <!-- Automatically place Apache 2 license headers at the top of all of the project's Java files. 
                 Rat runs during the 'validate' lifecycle step, so it will fail the build before this one 
                 executes if any of the headers are missing. However, that means rat also insn't checking the
                 generated sources because they haven't been generated yet. -->
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <!-- We use a custome Apache 2.0 license because we do not include a copywrite section. -->                
                    <header>src/main/resources/LICENSE.txt</header>
                    <!-- Turn default excludes off because they skip the 'target' directory, which contains
                         the JAXB generated sources. -->
                    <useDefaultExcludes>false</useDefaultExcludes>
                    <!-- Include all Java files. -->
                    <includes>
                        <include>**/*.java</include>
                    </includes>
                </configuration>
                <executions>
                    <execution>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>format</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <!--<useUniqueVersions>false</useUniqueVersions> -->
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>${jar.mainclass}</mainClass>
                        </manifest>
                        <manifestEntries>
                            <version>${project.version}</version>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                  <execution>
                    <goals>
                      <goal>integration-test</goal>
                      <goal>verify</goal>
                    </goals>
                  </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>